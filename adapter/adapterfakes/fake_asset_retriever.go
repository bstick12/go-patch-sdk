// Code generated by counterfeiter. DO NOT EDIT.
package adapterfakes

import (
	"sync"

	"github.com/bstick12/go-patch-sdk/adapter"
)

type FakeAssetRetriever struct {
	AssetStub        func(assetName string) ([]byte, error)
	assetMutex       sync.RWMutex
	assetArgsForCall []struct {
		assetName string
	}
	assetReturns struct {
		result1 []byte
		result2 error
	}
	assetReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAssetRetriever) Asset(assetName string) ([]byte, error) {
	fake.assetMutex.Lock()
	ret, specificReturn := fake.assetReturnsOnCall[len(fake.assetArgsForCall)]
	fake.assetArgsForCall = append(fake.assetArgsForCall, struct {
		assetName string
	}{assetName})
	fake.recordInvocation("Asset", []interface{}{assetName})
	fake.assetMutex.Unlock()
	if fake.AssetStub != nil {
		return fake.AssetStub(assetName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.assetReturns.result1, fake.assetReturns.result2
}

func (fake *FakeAssetRetriever) AssetCallCount() int {
	fake.assetMutex.RLock()
	defer fake.assetMutex.RUnlock()
	return len(fake.assetArgsForCall)
}

func (fake *FakeAssetRetriever) AssetArgsForCall(i int) string {
	fake.assetMutex.RLock()
	defer fake.assetMutex.RUnlock()
	return fake.assetArgsForCall[i].assetName
}

func (fake *FakeAssetRetriever) AssetReturns(result1 []byte, result2 error) {
	fake.AssetStub = nil
	fake.assetReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeAssetRetriever) AssetReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.AssetStub = nil
	if fake.assetReturnsOnCall == nil {
		fake.assetReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.assetReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeAssetRetriever) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assetMutex.RLock()
	defer fake.assetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAssetRetriever) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ adapter.AssetRetriever = new(FakeAssetRetriever)
